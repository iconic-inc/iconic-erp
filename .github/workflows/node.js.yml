# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI shopDev

on:
  push:
    branches: ['master']
    paths:
      - 'server/**'
      - '.github/workflows/node.js.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm install
        working-directory: server

      - name: Build
        working-directory: ./server
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            server/dist
            server/package.json
            server/package-lock.json

  # deploy:
  #   # needs: docker-build
  #   needs: build
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Set up SSH key
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

  #     - name: Check SSH connection
  #       run: ssh -o BatchMode=yes -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} echo "SSH connection successful"

  #     - name: Deploy to production
  #       run: |
  #         ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
  #           cd ${{ secrets.SERVER_PATH }}
  #           git pull origin master
  #           source ~/.nvm/nvm.sh
  #           nvm use 22
  #           npm install
  #           npm run build
  #           pm2 start ecosystem.config.js --env production || pm2 reload ecosystem.config.js --env production
  #         EOF
